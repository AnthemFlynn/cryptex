name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv sync --dev
      
    - name: Run ruff check
      run: uv run ruff check src/ tests/
      
    - name: Run ruff format check
      run: uv run ruff format --check src/ tests/
      
    - name: Run mypy type checking
      run: uv run mypy src/

  test:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
      
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv sync --dev
      
    - name: Run tests with coverage
      run: uv run pytest tests/ -v --cov=src/cryptex_ai --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv sync --dev
      
    - name: Run security tests
      run: uv run pytest tests/security/ -v
      
    - name: Run bandit security check
      run: uv run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run safety security check
      run: uv run safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Build package
      run: uv build
      
    - name: Install package from wheel
      run: uv pip install dist/*.whl
      
    - name: Test package installation
      run: |
        python -c "import cryptex_ai; print('✅ Package imports successfully')"
        python -c "from cryptex_ai import protect_secrets; print('✅ Core API works')"
        
    - name: Run examples
      run: |
        python examples/basic_usage/basic_usage.py
        python examples/real_world_usage/real_world_usage.py

  build:
    runs-on: ubuntu-latest
    needs: [test, security, integration]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Install build dependencies
      run: uv pip install build
      
    - name: Build package
      run: uv run python -m build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/