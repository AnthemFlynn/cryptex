name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  test-before-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run full test suite
      run: |
        uv run pytest tests/ -v --cov=src/cryptex

    - name: Build package
      run: |
        uv build

    - name: Test package installation
      run: |
        uv pip install dist/*.whl
        python -c "import cryptex; print('âœ… Package imports successfully')"

  publish:
    needs: test-before-publish
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'pypi' }}
      url: ${{ github.event.inputs.environment == 'testpypi' && 'https://test.pypi.org/project/cryptex-ai/' || 'https://pypi.org/project/cryptex-ai/' }}

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv run twine check dist/*

    - name: Publish to Test PyPI
      if: github.event.inputs.environment == 'testpypi'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        uv run twine upload --repository testpypi dist/*

    - name: Publish to PyPI
      if: github.event_name == 'release' || github.event.inputs.environment == 'pypi'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv run twine upload dist/*

    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      run: |
        gh release upload ${{ github.event.release.tag_name }} dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}