name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: uv pip install -e ".[dev,fastmcp,fastapi,ml]"
      
    - name: Run tests
      run: uv run pytest tests/ -v --cov=codename --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
      
    - name: Run ruff
      run: uv run ruff check src/ tests/
      
    - name: Run mypy
      run: uv run mypy src/
      
    - name: Check formatting
      run: uv run black --check src/ tests/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
      
    - name: Run bandit
      run: uv run bandit -r src/ -f json -o bandit-report.json
      
    - name: Run safety
      run: uv run safety check --json --output safety-report.json
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
      
    - name: Run performance benchmarks
      run: uv run pytest tests/ -m performance --benchmark-only --benchmark-json=benchmark-results.json
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install build dependencies
      run: uv pip install build
      
    - name: Build package
      run: uv run python -m build
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/