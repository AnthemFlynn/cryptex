[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cryptex"
dynamic = ["version"]
description = "Zero-config temporal isolation for AI/LLM applications - Bulletproof secrets isolation with zero cognitive overhead"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
authors = [
    {name = "Cryptex Team"},
]
keywords = ["ai", "llm", "security", "secrets", "isolation", "mcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
]
dependencies = [
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.7.0",
    "ruff>=0.0.287",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "build>=0.10.0",
    "twine>=4.0.0",
    "bump2version>=1.0.0",
    "pytest-watch>=4.2.0",
]
fastmcp = [
    "fastmcp>=0.1.0",
]
fastapi = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
]
ml = [
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/cryptex-ai/cryptex"
Documentation = "https://docs.cryptex-ai.com"
Repository = "https://github.com/cryptex-ai/cryptex"
Issues = "https://github.com/cryptex-ai/cryptex/issues"

[tool.hatch.version]
path = "src/cryptex/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/cryptex"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "security: marks tests as security-focused",
    "performance: marks tests as performance benchmarks",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/cryptex"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]